generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @unique
  name String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  member Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String
  imageUrl String @db.String
  inviteCode String @db.String @unique

  adminProfileId String @db.ObjectId
  adminProfile Profile @relation(fields: [adminProfileId], references: [id], onDelete:Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminProfileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete:Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete:Cascade)

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  directMessages DirectMessage[]
  channelMessages ChannelMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
} 

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId 

  name String 
  type ChannelType @default(TEXT)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references:[id], onDelete:Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages ChannelMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId 

  memberOneId String @db.ObjectId
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  messages DirectMessage[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model ChannelMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId 

  content String @db.String
  fileUrl String?

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id])

  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade )
  
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  content String

  fileUrl String?

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}
